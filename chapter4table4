library(xts)
library(foreign)
library(FinTS)
library(fGarch)
library(rugarch)
library(HAC)
library(reshape)
library(ggplot2)
library(copula)
library(rmgarch)
library(R.matlab)
library(nloptr)
library(numDeriv)
library(CDVine)
bonds.data.raw=read.dta("E:/HU/fourth_semester/master_thesis/data/datastream/2015/bonds.dta")
bonds.data=data.frame(bonds.data.raw[-c(1,2),-1])
colnames(bonds.data)=c("GM","IT","FR","SP","GR","NL","IR","PT","EMU")
bonds.data.all=data.frame(bonds.data)
bonds.data.all=apply(bonds.data.all,2,as.numeric)
bonds.data.all.log=log(bonds.data.all)
bonds.data.all.logr=apply(bonds.data.all.log,2,diff)
date=bonds.data.raw[-c(1,2),1]
date=as.Date(date,"%m/%d/%Y")
bonds.data.all.ts=100*xts(bonds.data.all.logr,order.by=date[-1])
##############get copula data function

get.copula.data=function(data){
  
  copula.data=matrix(,nrow(data),ncol(data))
  mean.data=matrix(,nrow(data),ncol(data))
  sigma.data=matrix(,nrow(data),ncol(data))
  shape.data=matrix(,1,ncol(data))
  skew.data=matrix(,1,ncol(data))
  spec.GM=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(1,1),submodel="TGARCH",
                                         external.regressors=NULL)
                     ,mean.model=list(armaOrder=c(1,1),include.mean=F),
                     distribution.model="sstd")
  spec.IT=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(1,0),submodel="TGARCH",
                                         external.regressors=NULL)
                     ,mean.model=list(armaOrder=c(1,1),include.mean=F),
                     distribution.model="sstd")
  spec.FR=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(1,1),submodel="TGARCH",
                                         external.regressors=NULL)
                     ,mean.model=list(armaOrder=c(1,1),include.mean=F),
                     distribution.model="sstd")
  spec.SP=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(1,1),submodel="TGARCH",
                                         external.regressors=NULL)
                     ,mean.model=list(armaOrder=c(1,1),include.mean=F),
                     distribution.model="sstd")
  spec.GR=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(6,0),submodel="TGARCH",
                                         external.regressors=NULL)
                     ,mean.model=list(armaOrder=c(1,4),include.mean=F),
                     distribution.model="sstd")
  spec.NL=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(1,1),submodel="TGARCH",
                                         external.regressors=NULL)
                     ,mean.model=list(armaOrder=c(1,1),include.mean=F),
                     distribution.model="sstd")
  spec.IR=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(4,0),submodel="TGARCH",
                                         external.regressors=NULL)
                     ,mean.model=list(armaOrder=c(1,3),include.mean=F),
                     distribution.model="sstd")
  spec.PT=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(4,0),submodel="TGARCH",
                                         external.regressors=NULL)
                     ,mean.model=list(armaOrder=c(2,0),include.mean=F),
                     distribution.model="sstd")##??
  spec.EMU=ugarchspec(variance.model=list(model="fGARCH",garchOrder=c(1,1),submodel="TGARCH",
                                          external.regressors=NULL)
                      ,mean.model=list(armaOrder=c(1,0),include.mean=F),
                      distribution.model="sstd")
  
  for(i in 1:ncol(data)){
    if (i==1){
      all.spec=spec.GM
    }else if(i==2){
      all.spec=spec.IT
    }else if(i==3){
      all.spec=spec.FR
    }else if(i==4){
      all.spec=spec.SP
    }else if(i==5){
      all.spec=spec.GR
    }else if(i==6){
      all.spec=spec.NL
    }else if(i==7){
      all.spec=spec.IR
    }else if(i==8){
      all.spec=spec.PT
    }else{
      all.spec=spec.EMU
    }
    all.garch=ugarchfit(all.spec,data[,i],solver="hybrid")
    all.residual=residuals(all.garch)
    all.shape=coef(all.garch)["shape"]
    all.skew=coef(all.garch)["skew"]
    all.mean=fitted(all.garch)
    all.sigma=sigma(all.garch)
    all.cdf=pit(all.garch)
    copula.data[,i]=all.cdf
    mean.data[,i]=all.mean
    sigma.data[,i]=all.sigma
    shape.data[,i]=all.shape
    skew.data[,i]=all.skew
    
  }
  return(list(copula.data,mean.data,sigma.data,shape.data,skew.data))###########
}


return.list=get.copula.data(bonds.data.all.ts)
copula.data.list=return.list[1]
copula.data=matrix(unlist(copula.data.list),ncol=9)

mean.data.list=return.list[2]
mean.data=matrix(unlist(mean.data.list),ncol=9)

sigma.data.list=return.list[3]
sigma.data=matrix(unlist(sigma.data.list),ncol=9)

shape.data.list=return.list[4]
shape.data=matrix(unlist(shape.data.list),ncol=9)

skew.data.list=return.list[5]
skew.data=matrix(unlist(skew.data.list),ncol=9)
#########EMU data after filtering
copula.data.EMU=copula.data[,9]
mean.data.EMU=mean.data[,9]
sigma.data.EMU=sigma.data[,9]
shape.data.EMU=shape.data[9]
skew.data.EMU=skew.data[9]
#############################coplua model estimation of gussian 


LL=function(theta,data){
  ###define dependence paramters evolution path
  source("TVeq.norm.r")
  ###############################calculate loglikelihood ###############
  u=data[,1]
  v=data[,2]
  log.density=function(theta,u,v){
    density=dCopula(c(u,v),normalCopula(theta,dim=2),log=T)
  }
  LL=Vectorize(log.density)(TVeq(theta,data),u,v)
  LL=sum(LL)
  return(-LL)
}
# eval_g0=function(theta,data){
#   a=theta[1]
#   b=theta[2]
#   return(a+b-0.9999)
# }
#############optimazation####################
theta.copula=matrix(,nrow(bonds.data.all.ts),ncol(bonds.data.all.ts)-1)
AIC=rep(1,ncol(copula.data)-1)
st_error=matrix(,3,ncol(bonds.data.all.ts)-1)
solution=matrix(,3,ncol(bonds.data.all.ts)-1)##### store standard error
for (i in 1:(ncol(copula.data)-1)){
  cat(i,"optimazation")
  res1=nloptr( x0=c(1,-0.5,0.8),
               eval_f=LL,
               lb = c(-Inf,-Inf,-Inf),
               ub = c(Inf,Inf,Inf),
               opts = list("algorithm"="NLOPT_LN_COBYLA","xtol_rel"=1.0e-4),
               data=copula.data[,c(i,9)]
  )
  source("TVeq.norm.r")
  vecRt=TVeq.norm(res1$solution,data=copula.data[,c(i,9)])
  theta.copula[,i]=vecRt
  solution[,i]=matrix(res1$solution,length(res1$solution),1)
  AIC[i]=2*length(res1$solution)-2*(-LL(res1$solution,copula.data[,c(i,9)]))
  st_error[,i]=matrix(diag(sqrt(solve(optimHess(res1$solution,LL,data=copula.data[,c(i,9)])))),length(res1$solution),1)
}
write.csv(theta.copula,file="E:/HU/fourth_semester/master_thesis/Rcode/results/theta_copula_TV_norm.csv")
write.csv(solution,file="E:/HU/fourth_semester/master_thesis/Rcode/results/solution_TV_norm.csv")
write.csv(AIC,file="E:/HU/fourth_semester/master_thesis/Rcode/results/AIC_TV_norm.csv")
write.csv(st_error,file="E:/HU/fourth_semester/master_thesis/Rcode/results/ste_TV_norm.csv")


#############################coplua model estimation of T copula#############
LL=function(theta,data){
  ###define dependence paramters evolution path
  source("TVeq.t.r")
  
  ###############################calculate loglikelihood ###############
  u=data[,1]
  v=data[,2]
  
  log.density=function(theta,u,v,df){
    density=dCopula(c(u,v),tCopula(theta,dim=2,df=df),log=T)
    return(density)
  }
  LL=mapply(log.density,TVeq.t(theta,data),u,v,df=theta[4])
  LL=sum(LL)
  
  return(-LL)
}
# eval_g0=function(theta,data){
#   a=theta[1]
#   b=theta[2]
#   return(a+b-0.9999)
# }
#############optimazation####################
theta.copula=matrix(,nrow(bonds.data.all.ts),ncol(bonds.data.all.ts)-1)
AIC=rep(1,ncol(copula.data)-1)
st_error=matrix(,4,ncol(bonds.data.all.ts)-1)
solution=matrix(,4,ncol(bonds.data.all.ts)-1)##### store standard error
for (i in 1:(ncol(copula.data)-1)){
  cat(i,"optimazation")
  res1=nloptr( c(0,0,0,7.31),
               eval_f=LL,
               lb = c(-Inf,-Inf,-Inf,2),
               ub = c(Inf,Inf,Inf,200),
               opts = list("algorithm"="NLOPT_LN_COBYLA","xtol_rel"=1.0e-4),
               data=copula.data[,c(i,9)]
  )
 
  source("TVeq.t.r")
  vecRt=TVeq(res1$solution,data=copula.data[,c(i,9)])
  theta.copula[,i]=vecRt
  solution[,i]=matrix(res1$solution,length(res1$solution),1)
  AIC[i]=2*length(res1$solution)-2*(-LL(res1$solution,copula.data[,c(i,9)]))
  st_error[,i]=matrix(diag(sqrt(solve(optimHess(res1$solution,LL,data=copula.data[,c(i,9)])))),length(res1$solution),1)
}
write.csv(theta.copula,file="E:/HU/fourth_semester/master_thesis/Rcode/results/theta_copula_TV_t.csv")
write.csv(solution,file="E:/HU/fourth_semester/master_thesis/Rcode/results/solution_TV_t.csv")
write.csv(AIC,file="E:/HU/fourth_semester/master_thesis/Rcode/results/AIC_TV_t.csv")
write.csv(st_error,file="E:/HU/fourth_semester/master_thesis/Rcode/results/ste_TV_t.csv")




#############################coplua model estimation of gumbel copula#############

LL=function(theta,data){
  ###define dependence paramters evolution path
  source("Pattoneq_gumbel.r")
  ###############################calculate loglikelihood ###############
  u=data[,1]
  v=data[,2]
  log.density=function(theta,u,v){
    density=dCopula(c(u,v),gumbelCopula(theta,dim=2),log=T)
  }
  LL=Vectorize(log.density)(Pattoneq.gumbel(theta,data),u,v)
  LL=sum(LL)
  return(-LL)
}


#############optimazation####################
theta.copula=matrix(,nrow(bonds.data.all.ts),ncol(bonds.data.all.ts)-1)
AIC=rep(1,ncol(copula.data)-1)
st_error=matrix(,3,ncol(bonds.data.all.ts)-1)##### store standard error
solution=matrix(,3,ncol(bonds.data.all.ts)-1)
for (i in 1:(ncol(copula.data)-1)){
  cat(i,"optimazation")
  res1=nloptr( x0=c(0,-0.5,-0.5),
               eval_f=LL,
               lb = c(-Inf,-Inf,-Inf),
               ub = c(Inf,Inf,Inf),
               opts = list("algorithm"="NLOPT_LN_COBYLA","xtol_rel"=1.0e-4),
               data=copula.data[,c(i,9)]
  )
  source("Pattoneq_gumbel.r")
  vecRt=TVeq(res1$solution,data=copula.data[,c(i,9)])
  theta.copula[,i]=vecRt
  solution[,i]=matrix(res1$solution,length(res1$solution),1)
  AIC[i]=2*length(res1$solution)-2*(-LL(res1$solution,copula.data[,c(i,9)]))
  st_error[,i]=matrix(diag(sqrt(solve(optimHess(res1$solution,LL,data=copula.data[,c(i,9)])))),length(res1$solution),1)
}
write.csv(theta.copula,file="E:/HU/fourth_semester/master_thesis/Rcode/results/theta_copula_TV_gumbel.csv")
write.csv(solution,file="E:/HU/fourth_semester/master_thesis/Rcode/results/solution_TV_gumbel.csv")
write.csv(AIC,file="E:/HU/fourth_semester/master_thesis/Rcode/results/AIC_TV_gumbel.csv")
write.csv(st_error,file="E:/HU/fourth_semester/master_thesis/Rcode/results/ste_TV_gumbel.csv")




#############################coplua model estimation of frank copula###
LL=function(theta,data){
  ###define dependence paramters evolution path
  source("Pattoneq_Frank.r")
  tau=matrix(Pattoneq.frank(theta,data),ncol=1)
  psi=apply(tau,1,BiCopTau2Par,family=5)
  ###############################calculate loglikelihood ###############
  u=data[,1]
  v=data[,2]
  log.density=function(theta,u,v){
    density=dCopula(c(u,v),frankCopula(theta,dim=2),log=T)
  }
  LL=Vectorize(log.density)(psi,u,v)
  LL=sum(LL)
  return(-LL)
}


#############optimazation####################
theta.copula=matrix(,nrow(bonds.data.all.ts),ncol(bonds.data.all.ts)-1)
AIC=rep(1,ncol(copula.data)-1)
st_error=matrix(,3,ncol(bonds.data.all.ts)-1)##### store standard error
solution=matrix(,3,ncol(bonds.data.all.ts)-1)
for (i in c(,6)){
  cat(i,"optimazation")
  res1=nloptr( x0=c(-0.23,0.63,0.45),
               eval_f=LL,
               lb = c(-Inf,-Inf,-Inf),
               ub = c(Inf,Inf,Inf),
               opts = list("algorithm"="NLOPT_LN_COBYLA","xtol_rel"=1.0e-4),
               data=copula.data[,c(i,9)]
  )
  
  source("Pattoneq_Frank.r")
  vecRt=TVeq(res1$solution,data=copula.data[,c(i,9)])
  theta.copula[,i]=vecRt
  solution[,i]=matrix(res1$solution,length(res1$solution),1)
  AIC[i]=2*length(res1$solution)-2*(-LL(res1$solution,copula.data[,c(i,9)]))
  st_error[,i]=matrix(diag(sqrt(solve(optimHess(res1$solution,LL,data=copula.data[,c(i,9)])))),length(res1$solution),1)
}
write.csv(theta.copula,file="E:/HU/fourth_semester/master_thesis/Rcode/results/theta_copula_TV_frank.csv")
write.csv(solution,file="E:/HU/fourth_semester/master_thesis/Rcode/results/solution_TV_frank.csv")
write.csv(AIC,file="E:/HU/fourth_semester/master_thesis/Rcode/results/AIC_TV_frank.csv")
write.csv(st_error,file="E:/HU/fourth_semester/master_thesis/Rcode/results/ste_TV_frank.csv")


#############################coplua model estimation of joe copula###
LL=function(theta,data){
  ###define dependence paramters evolution path
  source("Pattoneq_joe.r")
  
  ###############################calculate loglikelihood ###############
  u=data[,1]
  v=data[,2]
  log.density=function(theta,u,v){
    density=dCopula(c(u,v),joeCopula(theta,dim=2),log=T)
    return(density)
  }
  LL=Vectorize(log.density)(Pattoneq.joe(theta,data),u,v)
  LL=sum(LL)
  return(-LL)
}


#############optimazation####################
theta.copula=matrix(,nrow(bonds.data.all.ts),ncol(bonds.data.all.ts)-1)
AIC=rep(1,ncol(copula.data)-1)
st_error=matrix(,3,ncol(bonds.data.all.ts)-1)##### store standard error
solution=matrix(,3,ncol(bonds.data.all.ts)-1)
for (i in 2:(ncol(copula.data)-1)){
  cat(i,"optimazation")
  res1=nloptr( x0=c(1,1,-2),
               eval_f=LL,
               lb = c(-Inf,-Inf,-Inf),
               ub = c(Inf,Inf,Inf),
               opts = list("algorithm"="NLOPT_LN_COBYLA","xtol_rel"=1.0e-4),
               data=copula.data[,c(i,9)]
  )
  source("Pattoneq_joe.r")
  vecRt=TVeq(res1$solution,data=copula.data[,c(i,9)])
  theta.copula[,i]=vecRt
  solution[,i]=matrix(res1$solution,length(res1$solution),1)
  AIC[i]=2*length(res1$solution)-2*(-LL(res1$solution,copula.data[,c(i,9)]))
  st_error[,i]=matrix(diag(sqrt(solve(optimHess(res1$solution,LL,data=copula.data[,c(i,9)])))),length(res1$solution),1)
}
write.csv(theta.copula,file="E:/HU/fourth_semester/master_thesis/Rcode/results/theta_copula_TV_joe.csv")
write.csv(solution,file="E:/HU/fourth_semester/master_thesis/Rcode/results/solution_TV_joe.csv")
write.csv(AIC,file="E:/HU/fourth_semester/master_thesis/Rcode/results/AIC_TV_joe.csv")
write.csv(st_error,file="E:/HU/fourth_semester/master_thesis/Rcode/results/ste_TV_joe.csv")

#############################coplua model estimation of clayton copula###
LL=function(theta,data){
  ###define dependence paramters evolution path
  source("Pattoneq_clayton.r")
  tau=matrix(Pattoneq.clayton(theta,data),ncol=1)
  psi=2/(1-tau)-2
  ###############################calculate loglikelihood ###############
  u=data[,1]
  v=data[,2]
  log.density=function(theta,u,v){
    density=dCopula(c(u,v),claytonCopula(theta,dim=2),log=T)
  }
  LL=Vectorize(log.density)(psi,u,v)
  LL=sum(LL)
  return(-LL)
}


#############optimazation####################
theta.copula=matrix(,nrow(bonds.data.all.ts),ncol(bonds.data.all.ts)-1)
AIC=rep(1,ncol(copula.data)-1)
st_error=matrix(,3,ncol(bonds.data.all.ts)-1)##### store standard error
solution=matrix(,3,ncol(bonds.data.all.ts)-1)
for (i in 1:(ncol(copula.data)-1)){
  cat(i,"optimazation")
  res1=nloptr( x0=c(0.1,-0.3,-0.5),
               eval_f=LL,
               lb = c(-Inf,-Inf,-Inf),
               ub = c(Inf,Inf,Inf),
               opts = list("algorithm"="NLOPT_LN_COBYLA","xtol_rel"=1.0e-4),
               data=copula.data[,c(i,9)]
  )
  source("Pattoneq_clayton.r")
  theta.copula[,i]=Pattoneq.clayton(res1$solution,data=copula.data[,c(i,9)])
  solution[,i]=matrix(res1$solution,length(res1$solution),1)
  AIC[i]=2*length(res1$solution)-2*(-LL(res1$solution,copula.data[,c(i,9)]))
  st_error[,i]=matrix(diag(sqrt(solve(optimHess(res1$solution,LL,data=copula.data[,c(i,9)])))),length(res1$solution),1)
}
write.csv(theta.copula,row.names=F,file="E:/HU/fourth_semester/master_thesis/Rcode/results/theta_copula_TV_clayton.csv")
write.csv(solution,row.names=F,file="E:/HU/fourth_semester/master_thesis/Rcode/results/solution_TV_clayton.csv")
write.csv(AIC,row.names=F,file="E:/HU/fourth_semester/master_thesis/Rcode/results/AIC_TV_clayton.csv")
write.csv(st_error,row.names=F,file="E:/HU/fourth_semester/master_thesis/Rcode/results/ste_TV_clayton.csv")



#############################coplua model estimation of survival Gumbel copula###
LL=function(theta,data){
  ###define dependence paramters evolution path
  source("Pattoneq_sgumbel.r")
  
  ###############################calculate loglikelihood ###############
  u=data[,1]
  v=data[,2]
  log.density=function(theta,u,v){
    density=log(BiCopPDF(u,v,family=14,theta))
  }
  LL=Vectorize(log.density)(Pattoneq.sgumbel(theta,data),u,v)
  LL=sum(LL)
  return(-LL)
}


#############optimazation####################
theta.copula=matrix(,nrow(bonds.data.all.ts),ncol(bonds.data.all.ts)-1)
AIC=rep(1,ncol(copula.data)-1)
st_error=matrix(,3,ncol(bonds.data.all.ts)-1)##### store standard error
solution=matrix(,3,ncol(bonds.data.all.ts)-1)
for (i in 1:(ncol(copula.data)-1)){
  cat(i,"optimazation")
  res1=nloptr( x0=c(0.3,-0.2,0.9),
               eval_f=LL,
               lb = c(-Inf,-Inf,-Inf),
               ub = c(Inf,Inf,Inf),
               opts = list("algorithm"="NLOPT_LN_COBYLA","xtol_rel"=1.0e-4),
               data=copula.data[,c(i,9)]
  )
  source("Pattoneq_sgumbel.r")
  theta.copula[,i]=Pattoneq.sgumbel(res1$solution,data=copula.data[,c(i,9)])
  solution[,i]=matrix(res1$solution,length(res1$solution),1)
  AIC[i]=2*length(res1$solution)-2*(-LL(res1$solution,copula.data[,c(i,9)]))
  st_error[,i]=matrix(diag(sqrt(solve(optimHess(res1$solution,LL,data=copula.data[,c(i,9)])))),length(res1$solution),1)
}
write.csv(theta.copula,row.names=F,file="E:/HU/fourth_semester/master_thesis/Rcode/results/theta_copula_TV_sgumbel.csv")
write.csv(solution,row.names=F,file="E:/HU/fourth_semester/master_thesis/Rcode/results/solution_TV_sgumbel.csv")
write.csv(AIC,row.names=F,file="E:/HU/fourth_semester/master_thesis/Rcode/results/AIC_TV_sgumbel.csv")
write.csv(st_error,row.names=F,file="E:/HU/fourth_semester/master_thesis/Rcode/results/ste_TV_sgumbel.csv")


